(provide! (make-object object? send clone something)
  (define-record object (parent slots public private))
  (define-record method (args body context))

  (define make-object
    (vau body e
      (let ((obj (new-object e)))
        (eval (cons list body) (object-private obj))
        obj)))

  (defn (clone o)
    (make-object (delegates-to o)))

  (define send
    (vau (target msg . args) e
      (define val (eval target e))

      (define (where obj)
        (cond
          ((object? val) (list val val))

          ; combiners
          ((applicative? val)
            (list (make-primitive val applicative) applicative))

          ((dynvar? val)
            (list (make-primitive val dynvar) dynvar))

          ((operative? val)
            (list (make-primitive val operative) operative))

          ((combiner? val)
            (list (make-primitive val combiner) combiner))

          ; other primitives
          ((boolean? val)
            (list (make-primitive val boolean) boolean))

          ((environment? val)
            (list (make-primitive val environment) environment))

          ((ignore? val)
            (list (make-primitive val ignore) ignore))

          ((inert? val)
            (list (make-primitive val inert) inert))

          ((null? val)
            (list (make-primitive val null) null))

          ((number? val)
            (list (make-primitive val number) number))

          ((pair? val)
            (list (make-primitive val pair) pair))

          ((prompt? val)
            (list (make-primitive val prompt) prompt))

          ((string? val)
            (list (make-primitive val string) string))

          ((subcontinuation? val)
            (list (make-primitive val subcontinuation) subcontinuation))

          ((symbol? val)
            (list (make-primitive val symbol) symbol))

          ; encapsulation
          ((record? val)
            (list (make-primitive val record) record))

          (#t (fail (new cannot-send msg val)))))

      (send-from e where obj msg args)))

  (defn (make-primitive val obj)
    (let ((inst (clone obj)))
      (set! (object-private inst) this val)
      inst))

  (defn (send-from e where obj msg args)
    (define public (object-public obj))

    (cond
      ((apply (wrap binds?) (list public msg))
        (define meth (eval msg public))

        (eval
          (list*
            let-redirect
            (make-environment
              (object-slots where)
              (object-public where)
              (object-private where)
              (object-slots obj)
              (object-public obj)
              (method-context meth))
            (list (list (method-args meth) (cons list args)))
            (method-body meth))
          e))

      ((null? (object-parent obj))
        (fail (new message-not-understood where msg)))

      (#t (send-from e where (object-parent obj) msg args))))

  (defn (new-object e)
    (let* ((slots (make-environment))
           (public (make-environment))
           (private (make-environment e))
           (obj (object something slots public private)))
      (set! private this obj)

      (set! private *parent* (lambda () (object-parent obj)))

      (set! private property
        (vau (x y) env
          (apply (wrap set!) (list slots x (eval y env)))
          (apply (wrap set!) (list public x (eval (list lambda () x) slots)))))

      (set! private accessor
        (vau (what) #ignore
          (apply (wrap set!)
                 (list public what (eval (list lambda () what) slots)))))

      (set! private delegates-to
        (lambda (to)
          (set-object-parent! obj to)))

      (set! private set
        (vau (where what) e
          (eval (list set! slots where what) e)))

      (set! public responds-to?
        (vau (what) #ignore
          (or? (apply (wrap binds?) (list public what))
               (send (object-parent obj) responds-to? what))))

      (set! private public
        (vau ((name . args) . body) e
          (apply (wrap set!) (list slots name (vau args e (eval (list* send (string->symbol "this") name args) e))))
          (apply (wrap set!) (list public name (method args body e)))))

      (remote-eval (public (parent) (*parent*)) private)

      (remote-eval (public (delegate-to x) (delegates-to x)) private)

      obj))

    (define something ())

    (define something
      (make-object
        (public (->string)
          (inspect))

        (public (inspect)
          (show this)))))

(define combiner (make-object))
(define applicative (make-object (delegates-to combiner)))
(define dynvar (make-object (delegates-to combiner)))
(define operative (make-object (delegates-to combiner)))

(define boolean (make-object))
(define environment (make-object))
(define ignore (make-object))
(define inert (make-object))
(define null (make-object))
(define number (make-object))
(define pair (make-object))
(define prompt (make-object))
(define string
  (make-object
    (public (->string) this)))
(define subcontinuation (make-object))
(define symbol (make-object))

(define record
  (make-object
    (public (inspect) "<record>")))
